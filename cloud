#!/usr/bin/env python
#
# cloud - an easy to use tool for spawning disposable VM on an Openstack
#         cloud
#
# Francois Deppierraz <francois.deppierraz@nimag.net>
#
# License GPLv2+ applies

import os
import sys
import time
import subprocess
import pickle
import tempfile
import logging
import argparse
import ipaddr

IMAGE     = 'trusty-server-cloudimg-amd64'
USER      = 'ubuntu'
FLAVOR    = 'm1.small'
KEY_NAME  = os.environ['USER']
SEC_GROUP = 'all'
NAME      = 'cloud-script-disposable-vm'

KNOWN_HOSTS = tempfile.NamedTemporaryFile()

def setup_environment():
  if not 'OS_PASSWORD' in os.environ:
    source = '. ~/.openrc'
    dump = '/usr/bin/python -c "import os,pickle;print pickle.dumps(os.environ)"'
    penv = os.popen('%s && %s' %(source,dump))
    env = pickle.loads(penv.read())
    os.environ = env
  
  if not 'OS_PASSWORD' in os.environ:
    raise Exception('No Openstack environnment variables found!')


def ssh(args):
  logging.debug("ssh " + repr(args))
  return subprocess.call(['ssh', '-q', '-o', 'StrictHostKeyChecking=no', '-o', 'UserKnownHostsFile=%s' % KNOWN_HOSTS.name] + args)

def scp(args):
  logging.debug("scp" + repr(args))
  return subprocess.call(['scp', '-q', '-o', 'StrictHostKeyChecking=no', '-o', 'UserKnownHostsFile=%s' % KNOWN_HOSTS.name] + args)

def get_global_ip(nt, instance):
  logging.debug("Instance addresses: %s", instance.addresses)
  for net in instance.addresses:
    for address in instance.addresses[net]:
      ip = address['addr']
      if not ipaddr.IPv4Address(ip).is_private:
        logging.debug("Found global IP address: %s", ip)
        return ip

  ip = nt.floating_ips.create()
  logging.debug("Floating IP %s" % ip.ip)
  instance.add_floating_ip(ip)
  return ip.ip

def main(args):
  logging.debug("Connecting to Openstack cloud at %s" % (os.environ['OS_AUTH_URL']))
  
  try:
    from novaclient.v1_1 import client
    nt = client.Client(os.environ['OS_USERNAME'], os.environ['OS_PASSWORD'], os.environ['OS_TENANT_NAME'], os.environ['OS_AUTH_URL'], service_type="compute")
  
    try:
      image = filter(lambda im: args.image.lower() in im.name.lower(), nt.images.list())[0]
    except IndexError:
      logging.error("Image %s not found!" % args.image.lower())
      sys.exit(1)
    
    flavor = nt.flavors.find(name=args.flavor)
  
    if args.net:
      nics = [{'net-id': nt.networks.find(label=args.net).id}]
      instance = nt.servers.create(name=args.name, image=image.id, flavor=flavor.id, key_name=args.key_name, nics=nics)
    else:
      instance = nt.servers.create(name=args.name, image=image.id, flavor=flavor.id, key_name=args.key_name)

    logging.debug("Instance %s" % instance.id)
  
    while True:
      instance = nt.servers.get(instance.id)
      logging.debug(instance.status)
      if instance.status == 'ERROR':
        raise Exception('Instance creation failure')
      if instance.addresses != {}:
        logging.debug("IP addresses present")
        break
      else:
        time.sleep(1)

    ssh_ip = get_global_ip(nt, instance)
    logging.debug("Globallly reachable IP: %s", ssh_ip)

    instance.add_security_group(SEC_GROUP)
  
    while True:
      res = ssh(['%s@%s' % (USER, ssh_ip), 'echo'])
      if res == 0:
        break
      else:
        time.sleep(5)

    if args.script:
      logging.debug("Executing user supplied script: %s", args.script)
      scp([os.path.abspath(args.script), '%s@%s:/tmp/script' % (USER, ssh_ip)])
      if args.root:
        ssh(['-t', '%s@%s' % (USER, ssh_ip), 'chmod +x /tmp/script && sudo /tmp/script'])
      else:
        ssh(['-t', '%s@%s' % (USER, ssh_ip), 'chmod +x /tmp/script && /tmp/script'])
    elif args.command:
      logging.debug("Executing user supplied command: %s", args.command)
      ssh(['-t', '%s@%s' % (USER, ssh_ip), args.command])
    else:
      logging.debug("Executing interactive shell")
      ssh(['-t', '%s@%s' % (USER, ssh_ip)])

  finally:
    if not args.permanent:
      logging.debug("Cleanup...")

      try:
        instance.delete()
        logging.debug("Instance deleted")
      except:
        pass
  
      try:
        ip.delete()
        logging.debug("IP deleted")
      except:
        pass

def usage():
  print("Usage: %s [script]" % sys.argv[0])

if __name__ == '__main__':
  global DEBUG

  parser = argparse.ArgumentParser(description='Easy to use tool for spawing disposable VM on an Openstack')
  parser.add_argument('--debug', '-d', action='store_true')
  parser.add_argument('--image', '-i', default=IMAGE)
  parser.add_argument('--flavor', '-f', default=FLAVOR)
  parser.add_argument('--name', '-n', default=NAME)
  parser.add_argument('--net', default='default')
  parser.add_argument('--permanent', '-p', action='store_true')
  parser.add_argument('--root', '-r', action='store_true')
  parser.add_argument('--command', '-c')
  parser.add_argument('--key-name', '-k', default=KEY_NAME)
  parser.add_argument('script', nargs='?', default=False, help='Script that will automatically be run inside the VM')
  args = parser.parse_args()

  if args.debug:
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

  try:
    setup_environment()
    main(args)
  finally:
    KNOWN_HOSTS.close()
